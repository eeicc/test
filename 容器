class Node:
    def __init__(self,value):
        self.__value = value
        self.__next_node = None
    @property
    def value(self):
        return self.__value
    @property
    def next(self):
        return self.__next_node
    @next.setter
    def next(self,next_node):
        self.__next_node = next_node


class LinkedList:
    def __init__(self):
        self.__head = None
        self.__tail = None
        self.__size = 0
    def append(self,value):
        node = Node(value)
        if self.__head == None:
            self.__head = node
            self.__tail = self.__head
        else:
            self.__tail.next = node
            self.__tail = node
        self.__size += 1
    def insert(self,value):
        node = Node(value)
        if self.__head == None:
            self.__head = node
            self.__tail = self.__head
        else:
            node.next = self.__head
            self.__head = node
    def print(self):
        position = self.__head
        while position:
            print(position.value)
            position = position.next
    def __iter__(self):
        self.__iter__node = self.__head
        return self
    def __next__(self):
        if self.__iter__node:
            value = self.__iter__node.value
            self.__iter__node = self.__iter__node.next
            return value
        raise StopIteration
    def __getitem__(self,item):
        for idx,value in enumerate(self):
            if idx==item:
                return value
        
ll = LinkedList()
ll.append(3)
ll.append(2)
ll.append(1)
print(ll[0])
print(ll[3])
print('OK')

